'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var mobx = require('mobx');
var DateTimeConverter = _interopDefault(require('jb-modules/DateTimeModule/dist/DateTimeConverter.cjs.min'));
var mobxReact = require('mobx-react');

var _class, _descriptor, _descriptor2, _descriptor3, _temp;
function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }
var JBDateInputService = (_class = (_temp =
function () {
  function JBDateInputService(props) {
    var _this = this;
    _classCallCheck(this, JBDateInputService);
    _initializerDefineProperty(this, "componentStatus", _descriptor, this);
    _initializerDefineProperty(this, "elements", _descriptor2, this);
    _initializerDefineProperty(this, "defaultConfig", _descriptor3, this);
    this.config = null;
    this.valueString = "";
    this.isValid = false;
    this.errorMessage = "";
    this.onKeyPressEvent = undefined;
    this.onSubmitEvent = undefined;
    this.gregorianDateObj = null;
    var disposer = mobx.observe(this.componentStatus, function (change) {
      return _this.onComponentStatusFocusChange(change);
    });
    this.config = this.mergeObject(props.config, this.defaultConfig);
    this.onChangeEvent = props.onChange;
    this.onKeyPressEvent = props.onKeyPress || function () {};
    this.onSubmitEvent = props.onSubmit || function () {};
    this.valueString = props.value;
    if (props.autoFocus == true) {
      this.config.autoFocus = true;
    }
    this.inputMaskToRegex();
  }
  _createClass(JBDateInputService, [{
    key: "mergeObject",
    value: function mergeObject(inputConfig, defaultConfig) {
      var addedProperty = {};
      for (var prop in defaultConfig) {
        if (inputConfig[prop] == undefined || inputConfig[prop] == null) {
          addedProperty[prop] = defaultConfig[prop];
        }
      }
      mobx.extendObservable(inputConfig, addedProperty);
      return inputConfig;
    }
  }, {
    key: "inputMaskToRegex",
    value: function inputMaskToRegex() {
      var regxString = this.config.inputMask.replace('yyyy', '(?<year>\\d{4})').replace('MM', '(?<month>\\d{2})').replace('dd', '(?<day>\\d{2})').replace('HH', '(?<hour>\\d{2})').replace('mm', '(?<minute>\\d{2})').replace('ss', '(?<second>\\d{2})').replace('.SSS', '(?:\.(?<milliSecond>\\d{1,3})){0,1}').replace('SSS', '(?<milliSecond>\\d{1,3})').replace('ZZ', '(?<timeZone>([+-](?<timeZoneHour>2[0-3]|[01][0-9]):(?<timeZoneMinute>[0-5][0-9])){0,1})');
      this.config.inputMaskRegex = new RegExp(regxString, "g");
    }
  }, {
    key: "updateCalendarValue",
    value: function updateCalendarValue(valueString) {
      if (this.valueString != "" && this.valueString) {
        var dateobj = this.decodeValueString(valueString);
        var jalaliDate = DateTimeConverter.convertGregorianToJalali(dateobj.year, dateobj.month, dateobj.day);
        this.config.jalaliDateObj = jalaliDate;
        this.valueString = valueString;
        this.updateUiValueByConfigData();
      }
    }
  }, {
    key: "updateUiValueByConfigData",
    value: function updateUiValueByConfigData() {
      if (this.elements.yearInput.current && this.elements.monthInput.current && this.elements.dayInput.current) {
        this.elements.yearInput.current.value = this.config.jalaliDateObj.year;
        var monthValue = this.config.jalaliDateObj.month;
        if (this.config.jalaliDateObj.month < 10) {
          monthValue = "0" + monthValue;
        }
        this.elements.monthInput.current.value = monthValue;
        var dayValue = this.config.jalaliDateObj.day;
        if (this.config.jalaliDateObj.day < 10) {
          dayValue = "0" + dayValue;
        }
        this.elements.dayInput.current.value = dayValue;
      }
    }
  }, {
    key: "decodeValueString",
    value: function decodeValueString(valueString) {
      this.config.inputMaskRegex.lastIndex = 0;
      var result = this.config.inputMaskRegex.exec(valueString);
      return result.groups;
    }
  }, {
    key: "onYearInputFocus",
    value: function onYearInputFocus(e) {
      this.componentStatus.focus = "year";
      return true;
    }
  }, {
    key: "onMonthInputFocus",
    value: function onMonthInputFocus(e) {
      this.componentStatus.focus = "month";
      return true;
    }
  }, {
    key: "onDayInputFocus",
    value: function onDayInputFocus(e) {
      this.componentStatus.focus = "day";
      return true;
    }
  }, {
    key: "onYearInputBlur",
    value: function onYearInputBlur(e) {
      this.componentStatus.focus = "";
      return true;
    }
  }, {
    key: "onMonthInputBlur",
    value: function onMonthInputBlur(e) {
      this.componentStatus.focus = "";
      return true;
    }
  }, {
    key: "onDayInputBlur",
    value: function onDayInputBlur(e) {
      this.componentStatus.focus = "";
      return true;
    }
  }, {
    key: "onContainerClick",
    value: function onContainerClick(event) {
      if (event.target == this.elements.inputBox.current) {
        this.componentStatus.focus = "year";
        this.elements.yearInput.current.setSelectionRange(0, 0);
      }
    }
  }, {
    key: "onComponentStatusFocusChange",
    value: function onComponentStatusFocusChange(observeObject) {
      switch (observeObject.object.focus) {
        case "year":
          this.elements.yearInput.current.focus();
          break;
        case "month":
          this.elements.monthInput.current.focus();
          break;
        case "day":
          this.elements.dayInput.current.focus();
          break;
        case "":
          this.updateCalenderData();
          break;
      }
    }
  }, {
    key: "onYearInputKeyPress",
    value: function onYearInputKeyPress(event) {
      var carretPos = this.elements.yearInput.current.selectionStart;
      var inputedChar = event.key;
      if (carretPos == 4) {
        this.componentStatus.focus = "month";
        if (inputedChar == "/") {
          this.elements.monthInput.current.setSelectionRange(0, 0);
        } else {
          this.InputChartoBox(inputedChar, this.elements.monthInput.current, 0);
        }
      } else {
        this.InputChartoBox(inputedChar, this.elements.yearInput.current, carretPos);
      }
      this.onKeyPressEvent(event);
      event.preventDefault();
      return false;
    }
  }, {
    key: "onMonthInputKeyPress",
    value: function onMonthInputKeyPress(event) {
      var carretPos = this.elements.monthInput.current.selectionStart;
      var inputedChar = event.key;
      if (carretPos == 2) {
        this.componentStatus.focus = "day";
        if (inputedChar == "/") {
          this.elements.dayInput.current.setSelectionRange(0, 0);
        } else {
          this.InputChartoBox(inputedChar, this.elements.dayInput.current, 0);
        }
      } else {
        this.InputChartoBox(inputedChar, this.elements.monthInput.current, carretPos);
      }
      this.onKeyPressEvent(event);
      event.preventDefault();
      return false;
    }
  }, {
    key: "onDayInputKeyPress",
    value: function onDayInputKeyPress(event) {
      var carretPos = this.elements.dayInput.current.selectionStart;
      var inputedChar = event.key;
      if (carretPos > 1) {
        carretPos = 1;
      }
      this.InputChartoBox(inputedChar, this.elements.dayInput.current, carretPos);
      this.onKeyPressEvent(event);
      event.preventDefault();
    }
  }, {
    key: "InputChartoBox",
    value: function InputChartoBox(inputedChar, field, carretPos) {
      if (isNaN(inputedChar)) {
        return;
      }
      if (field === this.elements.monthInput.current) {
        if (parseInt(inputedChar) > 1 && carretPos == 0) {
          this.InputChartoBox("0", this.elements.monthInput.current, 0);
          inputedChar = inputedChar;
          carretPos++;
        }
        if (carretPos == 1 && this.elements.monthInput.current.value[0] == "1" && inputedChar > 2) {
          return;
        }
        if (carretPos == 0 && this.elements.monthInput.current.value[1] > "2" && inputedChar == "1") {
          this.InputChartoBox("0", this.elements.monthInput.current, 1);
        }
      }
      if (field === this.elements.dayInput.current) {
        if (parseInt(inputedChar) > 3 && carretPos == 0) {
          this.InputChartoBox("0", this.elements.dayInput.current, 0);
          carretPos++;
        }
        if (carretPos == 1 && this.elements.dayInput.current.value[0] == "3" && inputedChar > 1) {
          return;
        }
        if (carretPos == 0 && this.elements.dayInput.current.value[1] > "1" && inputedChar == "3") {
          this.InputChartoBox("0", this.dayInput.current, 1);
        }
      }
      var currentValue = field.value;
      var maxLength = field == this.elements.yearInput.current ? 4 : 2;
      var i;
      i = currentValue.length == maxLength ? 1 : 0;
      var newValue = currentValue.substr(0, carretPos) + inputedChar + currentValue.substr(carretPos + i);
      if (field === this.elements.dayInput.current) {
        this.config.jalaliDateObj.day = parseInt(newValue);
      }
      if (field === this.elements.monthInput.current) {
        this.config.jalaliDateObj.month = parseInt(newValue);
      }
      if (field === this.elements.yearInput.current) {
        this.config.jalaliDateObj.year = parseInt(newValue);
      }
      field.value = newValue;
      field.setSelectionRange(carretPos + 1, carretPos + 1);
    }
  }, {
    key: "onYearInputKeyDown",
    value: function onYearInputKeyDown(event) {
      if (event.keyCode == 39) {
        var carretPos = this.elements.yearInput.current.selectionStart;
        if (carretPos == 4) {
          this.componentStatus.focus = "month";
          this.elements.monthInput.current.setSelectionRange(0, 0);
          event.stopPropagation();
          return false;
        }
      }
      if (event.keyCode == 38) {
        this.addToDate(1, "year");
      }
      if (event.keyCode == 40) {
        this.addToDate(-1, "year");
      }
      return true;
    }
  }, {
    key: "onMonthInputKeyDown",
    value: function onMonthInputKeyDown(event) {
      if (event.keyCode == 39) {
        var carretPos = this.elements.monthInput.current.selectionStart;
        if (carretPos == 2) {
          this.componentStatus.focus = "day";
          this.elements.dayInput.current.setSelectionRange(0, 0);
          event.stopPropagation();
          return false;
        }
      }
      if (event.keyCode == 37) {
        var carretPos = this.elements.monthInput.current.selectionStart;
        if (carretPos == 0) {
          this.componentStatus.focus = "year";
          this.elements.yearInput.current.setSelectionRange(4, 4);
          event.stopPropagation();
          return false;
        }
      }
      if (event.keyCode == 38) {
        this.addToDate(1, "month");
      }
      if (event.keyCode == 40) {
        this.addToDate(-1, "month");
      }
      if (event.keyCode == 8) {
        var carretPos = this.elements.monthInput.current.selectionStart;
        if (carretPos == 0) {
          this.componentStatus.focus = "year";
          this.elements.yearInput.current.setSelectionRange(4, 4);
        }
      }
      return true;
    }
  }, {
    key: "onDayInputKeyDown",
    value: function onDayInputKeyDown(event) {
      if (event.keyCode == 37) {
        var carretPos = this.elements.dayInput.current.selectionStart;
        if (carretPos == 0) {
          this.componentStatus.focus = "month";
          this.elements.monthInput.current.setSelectionRange(2, 2);
          event.stopPropagation();
          return false;
        }
      }
      if (event.keyCode == 38) {
        this.addToDate(1, "day");
      }
      if (event.keyCode == 40) {
        this.addToDate(-1, "day");
      }
      if (event.keyCode == 8) {
        var carretPos = this.elements.dayInput.current.selectionStart;
        if (carretPos == 0) {
          this.componentStatus.focus = "month";
          this.elements.monthInput.current.setSelectionRange(2, 2);
        }
      }
      return true;
    }
  }, {
    key: "onYearInputKeyUp",
    value: function onYearInputKeyUp(event) {
      if (event.keyCode == 13) {
        if (this.validateDate()) {
          this.updateCalenderData();
          this.onSubmitEvent(event);
        }
      }
    }
  }, {
    key: "onMonthInputKeyUp",
    value: function onMonthInputKeyUp(event) {
      if (event.keyCode == 13) {
        if (this.validateDate()) {
          this.updateCalenderData();
          this.onSubmitEvent(event);
        }
      }
    }
  }, {
    key: "onDayInputKeyUp",
    value: function onDayInputKeyUp(event) {
      if (event.keyCode == 13) {
        if (this.validateDate()) {
          this.updateCalenderData();
          this.onSubmitEvent(event);
        }
      }
    }
  }, {
    key: "addToDate",
    value: function addToDate(value, type) {
      switch (type) {
        case "day":
          var inputvalue = parseInt(this.elements.dayInput.current.value);
          if (inputvalue + value <= 31 && value > 0) {
            var newValue = inputvalue + value;
            if (newValue < 10) {
              newValue = "0" + newValue;
            }
            this.elements.dayInput.current.value = newValue;
            this.config.jalaliDateObj.day = newValue;
          }
          if (inputvalue + value > 0 && value < 0) {
            var _newValue = inputvalue + value;
            if (_newValue < 10) {
              _newValue = "0" + _newValue;
            }
            this.elements.dayInput.current.value = _newValue;
            this.config.jalaliDateObj.day = _newValue;
          }
          break;
        case "month":
          var inputvalue = parseInt(this.elements.monthInput.current.value);
          if (inputvalue + value <= 12 && value > 0) {
            var _newValue2 = inputvalue + value;
            if (_newValue2 < 10) {
              _newValue2 = "0" + _newValue2;
            }
            this.elements.monthInput.current.value = _newValue2;
            this.config.jalaliDateObj.month = _newValue2;
          }
          if (inputvalue + value > 0 && value < 0) {
            var _newValue3 = inputvalue + value;
            if (_newValue3 < 10) {
              _newValue3 = "0" + _newValue3;
            }
            this.elements.monthInput.current.value = _newValue3;
            this.config.jalaliDateObj.month = _newValue3;
          }
          break;
        case "year":
          var inputvalue = parseInt(this.elements.yearInput.current.value);
          if (inputvalue + value < 9999 && value > 0) {
            var _newValue4 = inputvalue + value;
            this.elements.yearInput.current.value = _newValue4;
            this.config.jalaliDateObj.year = _newValue4;
          }
          if (inputvalue + value > 1000 && value < 0) {
            var _newValue5 = inputvalue + value;
            this.elements.yearInput.current.value = _newValue5;
          }
          break;
      }
      this.updateCalenderData();
    }
  }, {
    key: "updateCalenderData",
    value: function updateCalenderData() {
      var jalaliYear = this.config.jalaliDateObj.year;
      var jalaliMonth = this.config.jalaliDateObj.month;
      var jalaliDay = this.config.jalaliDateObj.day;
      this.gregorianDateObj = DateTimeConverter.convertJalaliToGregorian(jalaliYear, jalaliMonth, jalaliDay);
      var gregorianYear = this.gregorianDateObj.year;
      var gregorianMonth = this.gregorianDateObj.month;
      var gregorianDay = this.gregorianDateObj.day;
      var year;
      var month;
      var day;
      if (this.config.InputDateType == "gregorian") {
        year = gregorianYear;
        month = gregorianMonth;
        day = gregorianDay;
      } else {
        year = jalaliYear;
        month = jalaliMonth;
        day = jalaliDay;
      }
      var outputValue = this.config.inputMask;
      outputValue = outputValue.replace("yyyy", year);
      var dayString = day < 10 ? '0' + day : day;
      outputValue = outputValue.replace("dd", dayString);
      var monthString = month < 10 ? '0' + month : month;
      outputValue = outputValue.replace("MM", monthString);
      outputValue = outputValue.replace("HH", "12");
      outputValue = outputValue.replace("mm", "00");
      outputValue = outputValue.replace("ss", "00");
      outputValue = outputValue.replace("SSS", "000");
      outputValue = outputValue.replace("ZZ", "+00:00");
      outputValue = outputValue.replace("aaa", "AM");
      this.config.value = outputValue;
      var valueDetailObj = this.createEventDetailObject(outputValue);
      if (typeof this.onChangeEvent == "function") {
        this.callOnChangeEvent(outputValue, valueDetailObj);
      }
    }
  }, {
    key: "createEventDetailObject",
    value: function createEventDetailObject(outputValue) {
      var detailObj = {
        jalaliDateObj: this.config.jalaliDateObj,
        gregorianDateObj: this.gregorianDateObj,
        value: outputValue,
        isValid: this.validateDate(),
        errorMessage: this.errorMessage
      };
      return detailObj;
    }
  }, {
    key: "callOnChangeEvent",
    value: function callOnChangeEvent(newValue, valueDetailObj) {
      var _this2 = this;
      var event = new CustomEvent("change", {
        detail: valueDetailObj,
        bubbles: true,
        cancelable: true
      });
      event.simulated = true;
      var tracker = this.elements.componentDom.current._valueTracker;
      if (tracker) {
        tracker.setValue(newValue);
      }
      this.elements.componentDom.current.value = newValue;
      this.elements.componentDom.current.onchange = function (e) {
        return _this2.onChangeEvent(e);
      };
      this.elements.componentDom.current.dispatchEvent(event);
      return event;
    }
  }, {
    key: "validateDate",
    value: function validateDate() {
      this.isValid = true;
      this.errorMessage = "";
      var yearValue = this.elements.yearInput.current.value;
      var monthValue = this.elements.monthInput.current.value;
      var dayValue = this.elements.dayInput.current.value;
      if (isNaN(yearValue)) {
        this.errorMessage = "مقدار سال وارد شده عددی نیست";
        this.isValid = false;
      }
      if (isNaN(monthValue)) {
        this.errorMessage = "مقدار ماه وارد شده عددی نیست";
        this.isValid = false;
      }
      if (isNaN(dayValue)) {
        this.errorMessage = "مقدار روز وارد شده عددی نیست";
        this.isValid = false;
      }
      if (this.isValid == false) {
        return;
      }
      if (yearValue == '') {
        this.errorMessage = "سال حتما میبایست وارد شود";
        this.isValid = false;
      }
      if (monthValue == '') {
        this.errorMessage = "ماه حتما میبایست وارد شود";
        this.isValid = false;
      }
      if (dayValue == '') {
        this.errorMessage = "روز حتما میبایست وارد شود";
        this.isValid = false;
      }
      if (this.isValid == false) {
        return;
      }
      var monthValueNumber = parseInt(monthValue);
      var dayValueNumber = parseInt(dayValue);
      if (monthValueNumber < 1 || monthValueNumber > 12) {
        this.errorMessage = "ماه وارد شده در بازه صحیح نمی باشد";
        this.isValid = false;
        return;
      }
      if (dayValueNumber < 1 || dayValueNumber > 31) {
        this.errorMessage = "روز وارد شده در بازه صحیح نمی باشد";
        this.isValid = false;
        return;
      }
      var thirtyDayMonthNumber = [7, 8, 9, 10, 11, 12];
      if (thirtyDayMonthNumber.includes(monthValueNumber) && dayValueNumber == 31) {
        this.errorMessage = "ماه وارد شده سی و یک روزه نیست ";
        this.isValid = false;
        return;
      }
      return this.isValid;
    }
  }]);
  return JBDateInputService;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "componentStatus", [mobx.observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {
      focus: ""
    };
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "elements", [mobx.observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {
      componentDom: React.createRef(),
      yearInput: React.createRef(),
      monthInput: React.createRef(),
      dayInput: React.createRef(),
      inputBox: React.createRef()
    };
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "defaultConfig", [mobx.observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {
      value: null,
      jalaliDateObj: {
        year: "null",
        month: null,
        day: null
      },
      InputDateType: "gregorian",
      inputMask: "yyyy-MM-ddTHH:mm:ss.SSSZZ",
      inputMaskRegex: null
    };
  }
})), _class);

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === 'undefined') { return; }
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".jb-date-input-component{font-size:18px;display:inline-block;text-align:right;direction:rtl;box-sizing:border-box}.jb-date-input-component .jb-date-input-box{width:100%;height:100%}.jb-date-input-component .jb-date-input-box input{font-size:18px;font-family:inherit;direction:ltr;color:inherit;border:none;padding:3px 0;height:100%;box-sizing:border-box;margin:2px 0;background-color:transparent}.jb-date-input-component .jb-date-input-box input:focus{outline:none}.jb-date-input-component .jb-date-input-box input.year-input{width:44px}.jb-date-input-component .jb-date-input-box input.month-input{width:24px}.jb-date-input-component .jb-date-input-box input.day-input{width:24px}\n";
styleInject(css);

var _class$1;
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var JBDateInput = mobxReact.observer(_class$1 =
function (_React$Component) {
  _inherits(JBDateInput, _React$Component);
  function JBDateInput(props) {
    var _this;
    _classCallCheck$1(this, JBDateInput);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(JBDateInput).call(this, props));
    _this.service = new JBDateInputService(props);
    return _this;
  }
  _createClass$1(JBDateInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.value && this.props.value != "") {
        this.service.updateCalendarValue(this.props.value);
      }
      if (this.service.config.autoFocus) {
        this.service.elements.yearInput.current.focus();
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(props) {
      if (this.service.valueString != props.value) {
        this.service.updateCalendarValue(props.value);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      return React.createElement("div", {
        className: "jb-date-input-component " + this.props.className,
        ref: this.service.elements.componentDom,
        style: this.props.style
      }, React.createElement("div", {
        className: "jb-date-input-box",
        ref: this.service.elements.inputBox,
        onClick: function onClick(e) {
          return _this2.service.onContainerClick(e);
        }
      }, React.createElement("input", {
        onKeyDown: function onKeyDown(e) {
          return _this2.service.onDayInputKeyDown(e);
        },
        onKeyPress: function onKeyPress(e) {
          return _this2.service.onDayInputKeyPress(e);
        },
        ref: this.service.elements.dayInput,
        onKeyUp: function onKeyUp(e) {
          return _this2.service.onDayInputKeyUp(e);
        },
        onFocus: function onFocus(e) {
          return _this2.service.onDayInputFocus(e);
        },
        onBlur: function onBlur(e) {
          return _this2.service.onDayInputBlur(e);
        },
        className: "day-input"
      }), React.createElement("span", {
        className: "slash-seperator"
      }, "/"), React.createElement("input", {
        onKeyDown: function onKeyDown(e) {
          return _this2.service.onMonthInputKeyDown(e);
        },
        onKeyPress: function onKeyPress(e) {
          return _this2.service.onMonthInputKeyPress(e);
        },
        ref: this.service.elements.monthInput,
        onFocus: function onFocus(e) {
          return _this2.service.onMonthInputFocus(e);
        },
        onBlur: function onBlur(e) {
          return _this2.service.onMonthInputBlur(e);
        },
        className: "month-input"
      }), React.createElement("span", {
        className: "slash-seperator"
      }, "/"), React.createElement("input", {
        onKeyDown: function onKeyDown(e) {
          return _this2.service.onYearInputKeyDown(e);
        },
        onKeyPress: function onKeyPress(e) {
          return _this2.service.onYearInputKeyPress(e);
        },
        ref: this.service.elements.yearInput,
        onFocus: function onFocus(e) {
          return _this2.service.onYearInputFocus(e);
        },
        onBlur: function onBlur(e) {
          return _this2.service.onYearInputBlur(e);
        },
        className: "year-input"
      })));
    }
  }]);
  return JBDateInput;
}(React.Component)) || _class$1;

module.exports = JBDateInput;
